{"noir_version":"1.0.0-beta.8+ba05d729b9753aa5ce2b076c1dd4795edb173f68","hash":"4167611046055185006","abi":{"parameters":[{"name":"included_asset","type":{"kind":"array","length":2,"type":{"kind":"field"}},"visibility":"public"},{"name":"merkle_root","type":{"kind":"field"},"visibility":"public"},{"name":"order_hash","type":{"kind":"array","length":3,"type":{"kind":"field"}},"visibility":"public"},{"name":"precomp_secret","type":{"kind":"array","length":10,"type":{"kind":"field"}},"visibility":"public"},{"name":"order_asset","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"Note","fields":[{"name":"asset_address","type":{"kind":"field"}},{"name":"amount","type":{"kind":"integer","sign":"unsigned","width":128}},{"name":"secret","type":{"kind":"struct","path":"Combined_secret","fields":[{"name":"secret","type":{"kind":"field"}},{"name":"nonce","type":{"kind":"field"}}]}}]}},"visibility":"public"},{"name":"nullifier","type":{"kind":"array","length":2,"type":{"kind":"field"}},"visibility":"public"},{"name":"new_note_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}},"visibility":"public"},{"name":"input_note","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"Note","fields":[{"name":"asset_address","type":{"kind":"field"}},{"name":"amount","type":{"kind":"integer","sign":"unsigned","width":128}},{"name":"secret","type":{"kind":"struct","path":"Combined_secret","fields":[{"name":"secret","type":{"kind":"field"}},{"name":"nonce","type":{"kind":"field"}}]}}]}},"visibility":"private"},{"name":"output_note","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"Note","fields":[{"name":"asset_address","type":{"kind":"field"}},{"name":"amount","type":{"kind":"integer","sign":"unsigned","width":128}},{"name":"secret","type":{"kind":"struct","path":"Combined_secret","fields":[{"name":"secret","type":{"kind":"field"}},{"name":"nonce","type":{"kind":"field"}}]}}]}},"visibility":"private"},{"name":"inclusion_proof","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"Merkle_proof","fields":[{"name":"index","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"path","type":{"kind":"array","length":10,"type":{"kind":"field"}}}]}},"visibility":"private"}],"return_type":null,"error_types":{"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"}}},"bytecode":"","debug_symbols":"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","file_map":{"50":{"source":"use dep::poseidon;\nuse trees::merkle::MerkleTree;\n\nstruct Combined_secret {\n    secret: Field,\n    nonce: Field,\n}\n\nfn leaf_hasher(leafs: [Field; 2]) -> Field {\n    poseidon::poseidon2::Poseidon2::hash(leafs, 2)\n}\n\nfn process_path_hash(leaf: Field, index: u32, another_leaf: Field) -> Field {\n    // if index is even, then leaf is left child\n    // if index is odd, then leaf is right child\n    if index % 2 == 0 {\n        leaf_hasher([leaf, another_leaf])\n    } else {\n        leaf_hasher([another_leaf, leaf])\n    }\n}\n\nfn path_processor(leaf: Field, index: u32, hash_path: [Field; 10]) -> Field {\n    let mut calculated_hash = leaf;\n    let mut calculated_index = index;\n    for i in 0..10 {\n        calculated_hash = process_path_hash(calculated_hash, calculated_index, hash_path[i]);\n        calculated_index = calculated_index / 2;\n    }\n    calculated_hash\n}\n\n// H(asset_address, amount, H(secret,nonce))\nfn note_hasher(input: Note) -> Field {\n    let secret_hash =\n        poseidon::poseidon2::Poseidon2::hash([input.secret.secret, input.secret.nonce], 2);\n    poseidon::poseidon2::Poseidon2::hash(\n        [input.asset_address, input.amount as Field, secret_hash],\n        3,\n    )\n}\n\n// real note is\n// H(asset_address, amount, H(secret,nonce))\n// a UTXO note private use only\nstruct Note {\n    asset_address: Field,\n    amount: u128,\n    secret: Combined_secret,\n}\n// a UTXO note handling assets\nstruct Spending_asset {\n    asset_address: Field,\n    amount: u128,\n}\n\nstruct Merkle_proof {\n    index: u32,\n    path: [Field; 10],\n}\n\n// make order.\n// take in 2 notes\nfn main(\n    included_asset: pub [Field; 2],\n    merkle_root: pub Field,\n    order_hash: pub [Field; 3],\n    precomp_secret: pub [Field; 10],\n    order_asset: pub [Note; 2],\n    nullifier: pub [Field; 2],\n    new_note_hash: pub [Field; 2],\n    input_note: [Note; 2],\n    output_note: [Note; 2],\n    inclusion_proof: [Merkle_proof; 2],\n) {\n    // check if all input are valid\n    for i in 0..2 {\n        // skip if input note is empty\n        if input_note[i].amount != 0 {\n            // check correct nullifier\n            assert(nullifier[i] == input_note[i].secret.nonce);\n            // note is valid in tree\n            let leaf = note_hasher(input_note[i]);\n            let processed_root =\n                path_processor(leaf, inclusion_proof[i].index, inclusion_proof[i].path);\n            assert(processed_root == merkle_root);\n            // assert note asset is in included_asset in any order\n            assert(\n                (input_note[i].asset_address == included_asset[0])\n                    | (input_note[i].asset_address == included_asset[1]),\n            );\n        }\n    }\n\n    let mut sum_asset_1_in = 0u128;\n    let mut sum_asset_2_in = 0u128;\n    for i in 0..2 {\n        if input_note[i].asset_address == included_asset[0] {\n            sum_asset_1_in += input_note[i].amount;\n        } else {\n            sum_asset_2_in += input_note[i].amount;\n        }\n    }\n\n    // check if output notes are valid\n    for i in 0..2 {\n        if output_note[i].amount != 0 {\n            // note hash correctly\n            let out_hash = note_hasher(output_note[i]);\n            assert(new_note_hash[i] == out_hash);\n            // asset is in included_asset in any order\n            assert(\n                (output_note[i].asset_address == included_asset[0])\n                    | (output_note[i].asset_address == included_asset[1]),\n            );\n        }\n    }\n\n    // sum of output\n    let mut sum_asset_1_out = 0u128;\n    let mut sum_asset_2_out = 0u128;\n    for i in 0..2 {\n        if output_note[i].asset_address == included_asset[0] {\n            sum_asset_1_out += output_note[i].amount;\n        } else {\n            sum_asset_2_out += output_note[i].amount;\n        }\n    }\n\n    // sum order asset\n    for i in 0..2 {\n        if order_asset[i].amount != 0 {\n            // asset is in included_asset in any order\n            assert(\n                (order_asset[i].asset_address == included_asset[0])\n                    | (order_asset[i].asset_address == included_asset[1]),\n            );\n            if order_asset[i].asset_address == included_asset[0] {\n                sum_asset_1_out += order_asset[i].amount;\n            } else {\n                sum_asset_2_out += order_asset[i].amount;\n            }\n        }\n    }\n\n    // assert in and out\n    assert(sum_asset_1_in == sum_asset_1_out);\n    assert(sum_asset_2_in == sum_asset_2_out);\n}\n\nfn fake_merkle_proof(input: [Field; 2]) -> ([Merkle_proof; 2], Field) {\n    let mut current = leaf_hasher([input[0], input[1]]);\n    let mut p1 = [0; 10];\n    let mut p2 = [0; 10];\n    p1[0] = input[1];\n    p2[0] = input[0];\n\n    for i in 1..10 {\n        let random = poseidon::poseidon2::Poseidon2::hash([i as Field], 1);\n        current = leaf_hasher([current, random]);\n        p1[i] = random;\n        p2[i] = random;\n    }\n\n    let first_proof = Merkle_proof { index: 0, path: p1 };\n    let second_proof = Merkle_proof { index: 1, path: p2 };\n\n    ([first_proof, second_proof], current)\n}\n\n#[test]\nfn test_tree() {\n    let test1 = 69;\n    let test2 = 420;\n\n    let tmp = fake_merkle_proof([test1, test2]);\n    let p1 = tmp.0[0];\n    let p2 = tmp.0[1];\n    let root = tmp.1;\n\n    let root1 = path_processor(test1, p1.index, p1.path);\n    assert(root == root1);\n\n    let root2 = path_processor(test2, p2.index, p2.path);\n    assert(root2 == root);\n}\n\n#[test]\nfn test_failed_tree() {\n    let test1 = 69;\n    let test2 = 420;\n\n    let tmp = fake_merkle_proof([test1, test2]);\n    let p1 = tmp.0[0];\n    let p2 = tmp.0[1];\n    let root = tmp.1;\n\n    let root1 = path_processor(test1, p2.index, p1.path);\n    assert(root != root1);\n\n    let root2 = path_processor(test2, p1.index, p2.path);\n    assert(root2 != root);\n\n    let root3 = path_processor(test1, p1.index, p2.path);\n    assert(root != root3);\n\n    let root4 = path_processor(test1, p2.index, p1.path);\n    assert(root != root4);\n}\n\n#[test]\nfn test_simple_note_hash() {\n    let note =\n        Note { asset_address: 1, amount: 100, secret: Combined_secret { secret: 42, nonce: 69 } };\n    let hash = note_hasher(note);\n    assert(\n        hash\n            == poseidon::poseidon2::Poseidon2::hash(\n                [1, 100, poseidon::poseidon2::Poseidon2::hash([42, 69], 2)],\n                3,\n            ),\n    );\n}\n\n#[test]\nfn test_note_in_main() {\n    let test_note =\n        Note { asset_address: 1, amount: 100, secret: Combined_secret { secret: 42, nonce: 69 } };\n    let included_asset = [1, 2];\n    let note_hash = note_hasher(test_note);\n    let tmp = fake_merkle_proof([note_hash, note_hash]);\n    let inclusion_proof = tmp.0;\n    let merkle_root = tmp.1;\n    let empty_note =\n        Note { asset_address: 0, amount: 0, secret: Combined_secret { secret: 0, nonce: 0 } };\n    let order_note =\n        Note { asset_address: 1, amount: 100, secret: Combined_secret { secret: 0, nonce: 0 } };\n    main(\n        included_asset,\n        merkle_root,\n        [0, 0, 0],\n        [0; 10],\n        [order_note, empty_note],\n        [69, 0],\n        [note_hash, note_hash],\n        [test_note, empty_note],\n        [empty_note, empty_note],\n        inclusion_proof,\n    );\n}\n\n#[test]\nfn test_note_full() {\n    let test_note_1 =\n        Note { asset_address: 1, amount: 100, secret: Combined_secret { secret: 42, nonce: 69 } };\n    let test_note_2 =\n        Note { asset_address: 2, amount: 50, secret: Combined_secret { secret: 123, nonce: 456 } };\n    let included_asset = [1, 2];\n\n    let test_note_1_hash = note_hasher(test_note_1);\n    let test_note_2_hash = note_hasher(test_note_2);\n\n    let new_note_1 =\n        Note { asset_address: 1, amount: 75, secret: Combined_secret { secret: 2, nonce: 3 } };\n\n    let new_note_2 =\n        Note { asset_address: 2, amount: 35, secret: Combined_secret { secret: 12, nonce: 31 } };\n\n    let new_note_hash_1 = note_hasher(new_note_1);\n    let new_note_hash_2 = note_hasher(new_note_2);\n\n    let tmp = fake_merkle_proof([test_note_1_hash, test_note_2_hash]);\n    let inclusion_proof = tmp.0;\n    let merkle_root = tmp.1;\n\n    let order_note_1 =\n        Note { asset_address: 2, amount: 15, secret: Combined_secret { secret: 0, nonce: 0 } };\n\n    let order_note_2 =\n        Note { asset_address: 1, amount: 25, secret: Combined_secret { secret: 0, nonce: 0 } };\n\n    main(\n        included_asset,\n        merkle_root,\n        [0, 0, 0],\n        [0; 10],\n        [order_note_1, order_note_2],\n        [69, 456],\n        [new_note_hash_1, new_note_hash_2],\n        [test_note_1, test_note_2],\n        [new_note_1, new_note_2],\n        inclusion_proof,\n    );\n}\n\n#[test(should_fail)]\nfn test_note_in_fail_sum() {\n    let test_note =\n        Note { asset_address: 1, amount: 100, secret: Combined_secret { secret: 42, nonce: 69 } };\n    let included_asset = [1, 2];\n    let note_hash = note_hasher(test_note);\n    let tmp = fake_merkle_proof([note_hash, note_hash]);\n    let inclusion_proof = tmp.0;\n    let merkle_root = tmp.1;\n    let empty_note =\n        Note { asset_address: 0, amount: 0, secret: Combined_secret { secret: 0, nonce: 0 } };\n    let order_note =\n        Note { asset_address: 1, amount: 100, secret: Combined_secret { secret: 0, nonce: 0 } };\n    // too many order\n    main(\n        included_asset,\n        merkle_root,\n        [0, 0, 0],\n        [0; 10],\n        [order_note, order_note],\n        [69, 0],\n        [note_hash, note_hash],\n        [test_note, empty_note],\n        [empty_note, empty_note],\n        inclusion_proof,\n    );\n}\n\n#[test(should_fail)]\nfn test_note_in_fail_wrong_asset() {\n    let test_note =\n        Note { asset_address: 1, amount: 100, secret: Combined_secret { secret: 42, nonce: 69 } };\n    let included_asset = [3, 2];\n    let note_hash = note_hasher(test_note);\n    let tmp = fake_merkle_proof([note_hash, note_hash]);\n    let inclusion_proof = tmp.0;\n    let merkle_root = tmp.1;\n    let empty_note =\n        Note { asset_address: 0, amount: 0, secret: Combined_secret { secret: 0, nonce: 0 } };\n    let order_note =\n        Note { asset_address: 1, amount: 100, secret: Combined_secret { secret: 0, nonce: 0 } };\n    // too many order\n    main(\n        included_asset,\n        merkle_root,\n        [0, 0, 0],\n        [0; 10],\n        [order_note, empty_note],\n        [69, 0],\n        [note_hash, note_hash],\n        [test_note, empty_note],\n        [empty_note, empty_note],\n        inclusion_proof,\n    );\n}\n","path":"/Users/yoyoismacbook/Desktop/zinch/zeroinch/circuit/src/main.nr"},"57":{"source":"use std::default::Default;\nuse std::hash::Hasher;\n\ncomptime global RATE: u32 = 3;\n\npub struct Poseidon2 {\n    cache: [Field; 3],\n    state: [Field; 4],\n    cache_size: u32,\n    squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2 {\n    #[no_predicates]\n    pub fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        Poseidon2::hash_internal(input, message_size, message_size != N)\n    }\n\n    pub(crate) fn new(iv: Field) -> Poseidon2 {\n        let mut result =\n            Poseidon2 { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = crate::poseidon2_permutation(self.state, 4);\n    }\n\n    fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(\n        input: [Field; N],\n        in_len: u32,\n        is_variable_length: bool,\n    ) -> Field {\n        let two_pow_64 = 18446744073709551616;\n        let iv: Field = (in_len as Field) * two_pow_64;\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n\npub struct Poseidon2Hasher {\n    _state: [Field],\n}\n\nimpl Hasher for Poseidon2Hasher {\n    fn finish(self) -> Field {\n        let iv: Field = (self._state.len() as Field) * 18446744073709551616; // iv = (self._state.len() << 64)\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..self._state.len() {\n            sponge.absorb(self._state[i]);\n        }\n        sponge.squeeze()\n    }\n\n    fn write(&mut self, input: Field) {\n        self._state = self._state.push_back(input);\n    }\n}\n\nimpl Default for Poseidon2Hasher {\n    fn default() -> Self {\n        Poseidon2Hasher { _state: &[] }\n    }\n}\n","path":"/Users/yoyoismacbook/nargo/github.com/noir-lang/poseidon/v0.1.1/src/poseidon2.nr"}},"names":["main"],"brillig_names":["directive_invert","directive_integer_quotient"]}